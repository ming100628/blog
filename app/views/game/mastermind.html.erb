<div class="bg-slate-500 bg-pink-500 bg-white border-white border-8"></div>
<div
  class="mx-[32rem] my-3 border-2 border-black rounded-md bg-red-100"
  x-data="mastermind"
>
  <div>
    <div class="flex items-center">
      <template x-for="(idx, index) in unsubmittedGuess">
        <div
          class="rounded-full w-16 h-16 cursor-pointer"
          :class="allColors[idx]"
          @click="unsubmittedGuess[index] = (idx + 1) % 6"
        ></div>
      </template>

      <button
        @click="pegs[currentRound] = unsubmittedGuess.slice(); currentRound += 1; checkMasterCode()"
      >
        Submit Guess
      </button>
    </div>
  </div>
  <div>
    <h1>Rules:</h1>
    <ol>
      <li>1. NO EMPTY PEG</li>
      <li>2. NO REPEAT COLORS</li>
    </ol>
    <div class="flex flex-col items-center">
      <template x-for="row in 12">
        <div class="flex my-1">
          <template x-for="column in 4"
            ><div
              class="rounded-full w-8 h-8"
              @click="pegs[row - 1][column - 1] = currentColor;"
              :class="if (pegs[row - 1][column - 1] == null) { return 'bg-black' } else { return allColors[pegs[row - 1][column - 1]] }"
            ></div
          ></template>
          <div class="grid grid-cols-2 ml-2">
            <template x-for="fIndex in 4">
              <div
                class="rounded-full h-4 w-4"
                :class="let feedback = feedbacks[row - 1][fIndex - 1];
                  if (feedback == 0) {
                    return 'bg-white'
                  } else if (feedback == 1) {
                    return 'bg-slate-400'
                  } else if (feedback == 2) {
                    return 'bg-black'
                  }"
              ></div>
            </template>
          </div></div
      ></template>
    </div>
  </div>
</div>
<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("mastermind", () => ({
      feedbacks: [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
      ],
      pegs: [
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
        [null, null, null, null],
      ],
      unsubmittedGuess: [0, 0, 0, 0],
      masterCode: [],
      currentRound: 0,
      feedbackColors: ["bg-black", "bg-red-500", "bg-green-500"],
      allColors: [
        "bg-white",
        "bg-red-500",
        "bg-blue-500",
        "bg-purple-500",
        "bg-slate-500",
        "bg-green-500",
      ],
      currentColor: "pink",

      init() {
        this.createMasterCode();
      },

      createMasterCode() {
        while (this.masterCode.length < 4) {
          const randomColor = this.getRandomColor();
          if (!this.masterCode.includes(randomColor)) {
            this.masterCode.push(randomColor);
          }
        }
      },

      checkMasterCode() {
        let correct = [0, 0, 0, 0];
        for (let peg = 0; peg < 4; peg++) {
          for (let code = 0; code < 4; code++) {
            if (
              this.allColors[this.unsubmittedGuess[peg]] ==
              this.masterCode[code]
            ) {
              if (peg == code) {
                correct[peg] = 2;
              } else {
                correct[peg] = 1;
              }
            }
          }
        }
        this.feedbacks[this.currentRound - 1] = correct.sort();
        console.log(this.feedbacks);
        return correct;
      },

      getRandomColor() {
        const index = Math.floor(Math.random() * 6);
        return this.allColors[index];
      },
    }));
  });
</script>
