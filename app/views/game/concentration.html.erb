<div x-data="concentration">
  <div
    id="chatBox"
    class="z-50 p-4 h-64 w-64 bg-blue-100 absolute bottom-6 right-0 overflow-y-auto"
  >
    <template x-for="message in chatHistory">
      <p class="break-words" x-text="message">Player 1: hello</p>
    </template>
  </div>
  <input autofocus @keyup.enter="sendMessage()" x-model="chatText" class="z-50
  w-64 border-[5px] border-blue-200 absolute bottom-0 right-0 type="text" />
  const speechRecognistion = window.speechRecognition
  <div class="grid-cols-2 grid-cols-4 grid-cols-6"></div>
  <div>
    <template x-if="!started">
      <div class="flex justify-center">
        <div
          class="p-8 m-8 border-2 drop-shadow-2xl bg-red-50 border-gray-500 rounded-md"
        >
          <h1 class="text-xl">Choose The Number of Tiles!</h1>
          <div class="flex flex-col">
            <button
              @click="started = true; columns = 2; createUniquePairs((columns * columns) / 2); console.log(gameData.tiles)"
              class="bg-blue-300 p-3 m-3 rounded-md"
            >
              2x2
            </button>
            <button
              @click="started = true; columns = 4; createUniquePairs((columns * columns) / 2); console.log(gameData.tiles)"
              class="bg-blue-300 p-3 m-3 rounded-md"
            >
              4x4
            </button>
            <button
              @click="started = true; columns = 6; createUniquePairs((columns * columns) / 2); console.log(gameData.tiles)"
              class="bg-blue-300 p-3 m-3 rounded-md"
            >
              6x6
            </button>
          </div>
        </div>
      </div>
    </template>
    <template x-if="started">
      <div>
        <h1 x-text="playerName"></h1>
        <div class="flex justify-center">
          <div
            class="grid auto-rows-fr h-[70vh] w-[70vh]"
            :class="`grid-cols-${columns}`"
          >
            <template x-for="(tile, index) in gameData.tiles">
              <div
                class="cursor-pointer border-yellow-300 border-2"
                @click="toggle(index); gameover()"
              >
                <img
                  x-show="gameData.open[index]"
                  :src="`https://robohash.org/${gameData.tiles[index]}.png?bgset=bg1&set=set4`"
                  class="cursor-pointer"
                />
              </div>
            </template>
          </div>
        </div>
        <h1 x-text="gameData.turn"></h1>
      </div>
    </template>
  </div>
</div>
<script>
  const socket = io("http://localhost:3001", {
    transports: ["websocket"],
  });
  document.addEventListener("alpine:init", () => {
    Alpine.data("concentration", () => ({
      chatText: "",
      chatHistory: [],
      whenIEnteredTheGame: null,
      playerName: "Player 1",
      playedBy: "",
      started: false,
      columns: 0,
      gameData: {
        open: {},
        tiles: [],
        firstOpenTile: null,
        secondOpenTile: null,
        rounds: 0,
        no_of_clicks: 0,
        turn: "Player 1",
      },
      booleanVariable: false,
      init() {
        this.whenIEnteredTheGame = new Date();
        socket.on("gameDataUpdate", (data) => {
          this.gameData = data.gameData;
          this.playedBy = data.playerName;
        });

        socket.on("chatDataUpdate", (chatHistory) => {
          this.chatHistory = chatHistory;
          setTimeout(() => {
            this.scrollToChatBoxBottom();
          }, 50);
        });

        socket.on(
          "someOtherPlayerEntered",
          (timeTheOtherPersonEnteredTheGame) => {
            if (this.booleanVariable == false) {
              this.playerName = "Player 1";
              this.booleanVariable = true;
            } else {
              this.playerName = "Player 2";
            }
          }
        );
        socket.emit("someOtherPlayerEntered", this.whenIEnteredTheGame);
      },
      sendMessage() {
        socket.emit("chatDataUpdate", this.chatText);
        this.chatText = "";
      },
      scrollToChatBoxBottom() {
        document.getElementById("chatBox").scrollTop =
          document.getElementById("chatBox").scrollHeight + 100;
      },

      gameover() {
        let solvedTileCount = 0;
        for (key in Object.keys(this.gameData.open)) {
          if (this.gameData.open[key] == true) {
            solvedTileCount += 1;
          }
        }
        if (solvedTileCount == 16) {
          alert(`You have won and used ${this.gameData.rounds} rounds!`);
        }
      },
      toggle(index) {
        console.log(this.gameData.turn);
        console.log(this.playerName);
        console.log(this.gameData);
        if (this.gameData.no_of_clicks > 0 && this.gameData.open[index]) {
          return;
        }
        if (this.gameData.turn != this.playerName) {
          return;
        } else {
          // turn = another player
        }
        this.gameData.no_of_clicks += 1;
        if (this.gameData.no_of_clicks == 3) {
          // third click
          if (
            this.gameData.tiles[this.gameData.firstOpenTile] !=
            this.gameData.tiles[this.gameData.secondOpenTile]
          ) {
            this.gameData.open[this.gameData.firstOpenTile] = false;
            this.gameData.open[this.gameData.secondOpenTile] = false;
            if (this.gameData.turn == "Player 1") {
              this.gameData.turn = "Player 2";
            } else {
              this.gameData.turn = "Player 1";
            }
          }
          this.gameData.firstOpenTile = null;
          this.gameData.secondOpenTile = null;
          this.gameData.no_of_clicks = 0;
        } else if (this.gameData.no_of_clicks == 2) {
          // second click
          this.gameData.rounds += 1;
          this.gameData.secondOpenTile = index;
          this.gameData.open[index] = true;
        } else if (this.gameData.no_of_clicks == 1) {
          // first click
          this.gameData.firstOpenTile = index;
          this.gameData.open[index] = true;
        }
        socket.emit("gameDataUpdate", {
          gameData: this.gameData,
          playerName: this.playerName,
        });
      },
      createUniquePairs(numberOfPairs) {
        for (let i = 0; i < numberOfPairs; i++) {
          let png_number = Math.random(30000);
          this.gameData.tiles.push(png_number);
          this.gameData.tiles.push(png_number);
        }
        this.shuffle(this.gameData.tiles);
      },
      shuffle(array) {
        let currentIndex = array.length,
          randomIndex;
        while (currentIndex != 0) {
          randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex--;
          [array[currentIndex], array[randomIndex]] = [
            array[randomIndex],
            array[currentIndex],
          ];
        }
        return array;
      },
    }));
  });
</script>
