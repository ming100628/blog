<div
  class="left-48 right-0 bottom-0 top-0 bg-white overflow-y-auto fixed h-screen flex items-center"
  x-data="messages"
>
  <%= render 'find_users' %>

  <div class="w-full">
    <div class="flex items-center justify-center">
      <div class="w-[22%] border-2 p-2 border-black flex justify-between">
        <div>Username</div>
        <button @click="findUserModal = true">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </button>
      </div>

      <div class="w-[44%] border-2 p-2 border-black flex justify-between">
        <div>Username</div>
        <button>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z"
            />
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
        </button>
      </div>
    </div>
    <div class="flex items-center justify-center">
      <div class="w-[22%] h-96 border-2 p-2 border-black flex flex-col">
        <template x-for="chat_partner in Object.keys(chat_partners)">
          <div class="flex justify-between">
            <div class="flex">
              <button
                @click="current_room = chat_partners[chat_partner]; scrollToBottom('chatWindow')"
                x-text="chat_partner"
                class="hover:bg-red-50 rounded-md"
              ></button>
              <div
                class="text-xs"
                x-text="rooms[chat_partners[chat_partner]].filter((message) => !message.status).length"
              ></div>
            </div>
            <div>
              <template x-if="!checkBlock(chat_partners[chat_partner])">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.0"
                  stroke="currentColor"
                  class="w-4 h-4"
                  @click="
                    if (confirm('Do You Want to Block this User?')){
                      blockUser(chat_partners[chat_partner])
                    }"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636"
                  />
                </svg>
              </template>
              <template x-if="checkBlock(chat_partners[chat_partner])">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1.0"
                  stroke="currentColor"
                  class="w-4 h-4"
                  @click="
                    if (confirm('Do You Want to Unblock this User?')){
                      unBlock(chat_partners[chat_partner])
                    }"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M13.5 10.5V6.75a4.5 4.5 0 119 0v3.75M3.75 21.75h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H3.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z"
                  />
                </svg>
              </template>
            </div>
          </div>
        </template>
      </div>

      <div
        id="chatWindow"
        class="w-[44%] h-96 border-2 p-2 border-black overflow-scroll"
      >
        <template x-for="message in rooms[current_room]">
          <div>
            <div
              x-text="if (message.status === null) readMessage(message); return message.content"
            ></div>
            <div class="text-[6px] text-gray-400" x-text="message.status"></div>
          </div>
        </template>
        <input
          x-model="current_message"
          class="h-8 p-2 w-full"
          autofocus
          placeholder="type here"
          @keyup.enter="await createMessage(current_room, current_message); current_message = ''; scrollToBottom('chatWindow');"
        />
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("alpine:init", () => {
    Alpine.data("messages", () => ({
      currentUserId: <%= current_user.id %>,
      chat_partners: [],
      rooms: {},
      current_room: null,
      current_message: "",
      findUserModal: false,
      userSearchResults: [],
      blocks: [],

      async init() {
        await this.chatRooms()
        const socket = new WebSocket("ws://localhost:3000/cable")
        const that = this;
        this.getBlocks();
        this.current_room = Object.values(this.chat_partners)[0]
        socket.onopen = function (event) {

          const msg = {
            command: "subscribe",
            identifier: JSON.stringify({
              id: this.currentUserId,
              channel: "MessagesChannel"
            })
          }
          socket.send(JSON.stringify(msg))
        }
        socket.onmessage = function (event) {
          const data = JSON.parse(event.data)
          if (data.type === "ping" || data.message === undefined) { return }
          const message = data.message

          if (that.rooms[message.sender_id]) {

            that.rooms[message.sender_id].push(message)

          } else {
            if (that.rooms[message.receiver_id]) {
              that.rooms[message.receiver_id].push(message)
            } else {

              that.rooms[message.sender_id] = []
              that.rooms[message.sender_id].push(message)
              that.chat_partners[message.sender_username] = message.sender_id
              that.current_room = message.sender_id
            }
          }
        }
      },

      async chatRooms(){
        const result = await fetch(
          `/messages.json`,
          {
            method: "GET",
            headers: { "Content-Type": "application/json" },
          }
        );
        const data = await result.json();
        this.chat_partners = data.chat_partners
        this.rooms = data.rooms
      },


      scrollToBottom(id) {
        const element = document.getElementById(id)
        element.scrollTo(0, element.scrollHeight)
      },

      async createMessage(receiver_id, content) {
        const result = await fetch(`/messages`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']")
              .content,
          },
          body: JSON.stringify({ receiver_id, content }),
        });
        const message = await result.json();
        if (result.status >= 200 && result.status < 300) {
          this.rooms[receiver_id].push(message)
        };
        if (result.status === 403) {
          alert(message.error_message)
        };

      },

      async findUser(username) {
        const result = await fetch(
          `/users/search?username=${username}`,
          {
            method: "GET",
            headers: { "Content-Type": "application/json" },
          }
        );
        const data = await result.json();
        this.userSearchResults = data.results;
      },

      async readMessage(message) {
        const result = await fetch(
          `/messages/${message.id}/read`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          }
        );
        const data = await result.json();
        message.status = data.status;
      },

      async blockUser(blocked_id){
        const result = await fetch(
          `/blocks`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({blocked_id}),
          }
        );
        const data = await result.json();
        this.getBlocks();

      },

      async unBlock(unblocked_id){
        const result = await fetch(
          `/blocks/${unblocked_id}`,
          {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
          }
        );
        const data = await result.json();
        this.getBlocks();
      },

      async getBlocks(){
        const result = await fetch(
            "/blocks",
            {
              method: "GET",
              headers: {"Content-Type": "application/json"},
            }
        );
        const data = await result.json();
        this.blocks = data;
      },

      checkBlock(id){
        return this.blocks.some((element) => element.blocked_id === id)
      }
    }));
  });
</script>
